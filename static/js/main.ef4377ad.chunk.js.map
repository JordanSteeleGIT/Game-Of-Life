{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","neighbourPositions","useState","Array","from","length","grid","setGrid","isRunning","setIsRunning","rangeval","setRangeval","useInterval","newState","JSON","parse","stringify","map","rows","i","col","j","neighbors","forEach","x","y","newI","newK","runSimulation","className","onClick","k","newGridState","Math","random","type","min","value","max","onChange","event","target","style","display","gridTemplateColumns","gridClickHandler","width","height","backgroundColor","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef4377ad.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport useInterval from \"@use-it/interval\";\nimport \"./App.css\";\n\n/*Possible todos\n-If block goes to the edge make it appear on the other side or infinite grid\n\n\n\n*/\nfunction App() {\n  const neighbourPositions = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [-1, 0],\n    [1, 0],\n  ];\n\n  const numRows = 32;\n  const numCol = 32;\n\n  const [grid, setGrid] = useState(\n    Array.from({ length: numRows }, () =>\n      Array.from({ length: numCol }, () => 0)\n    )\n  );\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [rangeval, setRangeval] = useState(1000);\n\n  const gridClickHandler = (i, k) => {\n    let newState = JSON.parse(JSON.stringify(grid));\n    if (newState[i][k] === 1) {\n      newState[i][k] = 0;\n    } else {\n      newState[i][k] = 1;\n    }\n    setGrid(newState);\n  };\n\n  const runSimulation = () => {\n    let newState = JSON.parse(JSON.stringify(grid));\n    grid.map((rows, i) =>\n      rows.map((col, j) => {\n        let neighbors = 0;\n        neighbourPositions.forEach(([x, y]) => {\n          const newI = i + x;\n          const newK = j + y;\n          if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCol) {\n            neighbors += grid[newI][newK]; //Since the grid either contains 0 or 1 we can add that to the neighbors var\n          }\n        });\n        if (neighbors < 2 || neighbors > 3) {\n          newState[i][j] = 0;\n        } else if (newState[i][j] === 0 && neighbors === 3) {\n          newState[i][j] = 1;\n        }\n      })\n    );\n    return newState;\n  };\n\n  useInterval(() => {\n    if (!isRunning) {\n      return;\n    } else {\n      setGrid(() => runSimulation());\n    }\n  }, rangeval);\n\n  return (\n    <>\n      <h1 className=\"title\">Game Of Life</h1>\n      <div className=\"content-container\">\n        <div className=\"controls\">\n          <button\n            onClick={() => {\n              setIsRunning(() => !isRunning);\n            }}\n          >\n            {isRunning ? \"Stop\" : \"Run\"}\n          </button>\n          <button\n            onClick={() =>\n              grid.map((rows, i) =>\n                rows.map((col, k) => {\n                  const newGridState = [...grid];\n                  newGridState[i][k] = Math.random() > 0.7 ? 1 : 0;\n                  setGrid(newGridState);\n                })\n              )\n            }\n          >\n            Random\n          </button>\n          <button\n            onClick={() =>\n              grid.map((rows, i) =>\n                rows.map((col, k) => {\n                  const newGridState = [...grid];\n                  newGridState[i][k] = 0;\n                  setGrid(newGridState);\n                })\n              )\n            }\n          >\n            Clear\n          </button>\n          <div className=\"range\">\n            <input\n              type=\"range\"\n              min=\"100\"\n              value={rangeval}\n              max=\"4000\"\n              onChange={(event) => setRangeval(event.target.value)}\n            />\n            <h4>{rangeval}</h4>\n          </div>\n        </div>\n        <div\n          className=\"grid\"\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numRows},22px)`,\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                onClick={() => gridClickHandler(i, k)}\n                style={{\n                  width: 22,\n                  height: 22,\n                  backgroundColor: grid[i][k] ? \"black\" : \"#8B8C8C\",\n                  border: \"solid 1px black\",\n                }}\n              ></div>\n            ))\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}